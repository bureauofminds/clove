<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" 
		 minWidth="550" 
		 minHeight="400" verticalGap="0" backgroundColor="#E8E8E8"
		 xmlns:proxy="com.spice.vanilla.mx.proxy.*"
		 xmlns:binding="com.spice.binding.*" paddingBottom="0" 
		 xmlns:views="com.spice.clove.plugin.flex.views.*" 
		 xmlns:observer="com.spice.vanilla.flash.observer.*" 
		 xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*"
		 xmlns:prefs="com.spice.clove.plugin.core.sceneSync.flex.views.prefs.*" xmlns:observers="com.spice.vanilla.mx.proxy.observers.*">
	
	<mx:Script>
		<![CDATA[
			import com.greensock.easing.Cubic;
			import com.spice.clove.plugin.core.sceneSync.impl.SceneSyncPlugin;
			import com.spice.clove.plugin.core.views.render.ICloveDataViewController;
			import com.spice.clove.plugin.flex.views.FlexCloveDataTargetView;
			import com.spice.clove.sceneSync.core.calls.CallSceneSyncPluginType;
			import com.spice.clove.sceneSync.core.calls.CallSceneSyncablePluginType;
			import com.spice.clove.sceneSync.core.service.data.SceneSubscriptionData;
			import com.spice.vanilla.core.notifications.Notification;
			import com.spice.vanilla.flash.utils.ProxyCallUtils;
			
			import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			
			[Bindable] 
			public var plugin:SceneSyncPlugin;
			
			[Bindable] 
			public var subs:ArrayCollection = new ArrayCollection();
			
			private var _setFilterTimeout:int;
			
			
			
			protected function getSubscriptionsCall_responseDataChangeHandler(event):void
			{
				subs.source = getSubscriptionsCall.responseData;
				
				var sc:SceneSubscriptionData;
				
			}
			
			
			
			
			/**
			 */
			
			private function filterChange():void
			{
				//there could be a LOT of items, so only switch after 2 letters
				columnView.selectedIndex = int(searchBoxInput.text.length > 1);
				
				
				
				flash.utils.clearTimeout(this._setFilterTimeout);
				
				this._setFilterTimeout = flash.utils.setTimeout(this.setFilter,100);
				
				
			}
			
			/**
			 */
			
			private function setFilter():void
			{
				var filter:String = this.searchBoxInput.text;
				
				/*if(filter.length < 2)
				{
					filter = "";
				}*/
				
				plugin.getPluginMediator().notifyBoundObservers(new Notification(CallSceneSyncablePluginType.SCENE_SYNC_SET_FILTER_STR,filter));
			}
			
			/**
			 */
			
			private function deleteScene():void
			{
				if(this.plugin.getSceneSyncAccount())
					Alert.show("Are you sure you want to delete this scene?","Delete Scene",Alert.YES | Alert.CANCEL,null,onConfirm);
				
			}
			
			/**
			 */
			
			private function onConfirm(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					this.plugin.getSceneSyncAccount().deleteCurrentScene();
				}
			}
			
			/**
			 */
			
			private var _renameTimeout:int;
			
			/**
			 */
			
			private function rename():void
			{
				flash.utils.clearInterval(_renameTimeout);
				_renameTimeout = flash.utils.setTimeout(commitRename,500);
			}
			
			/**
			 */
			
			private function commitRename():void
			{
				this.plugin.getSceneSyncAccount().getService().renameCurrentScene(renamer.text);
			}
			
		
			
			
		]]>
	</mx:Script>
	
	<observers:MXProxyResponder notificationsOfInterest="{[CallSceneSyncablePluginType.SCENE_SYNC_SET_FILTER_STR]}"
								response="{this.searchBoxInput.text}" proxy="{this.plugin.getPluginMediator()}"  />
	
	<mx:HBox width="100%" visible="{this.plugin.getSceneSyncAccount() != null}">
		<mx:Label text="Current Scene:" />
		<mx:TextInput text="{currentSceneWatcher.data.name}" id="renamer" change="rename();" />
		<mx:Spacer width="100%" />
		<mx:Button label="Delete Scene" click="{deleteScene();}" />
	</mx:HBox>
	<observer:SettingObserver target="{plugin.getSceneSyncAccount().getCurrentScene()}" id="currentSceneWatcher" />
	
	
	<mx:Canvas width="100%" height="30">
		<mx:Label text="What would you like to receive updates about?" 
				  fontWeight="bold" 
				  left="20"
				  verticalCenter="0" />
	</mx:Canvas>
	<mx:HBox width="100%" 
			 height="39"
			 verticalAlign="middle"
			 styleName="installerSearchBg" 
			 paddingRight="20"
			 paddingLeft="20">
		<mx:Label text="Search" 
				  color="#FFFFFF" 
				  fontWeight="bold">
			<mx:filters>
				<mx:DropShadowFilter alpha=".5" color="#000000" angle="90" distance="1" />
			</mx:filters>
		</mx:Label>
		<mx:Canvas width="100%" styleName="installerSearchBox" height="23">
			
			<mx:TextInput backgroundAlpha="0" 
						  x="20"
						  borderSkin="{null}"  
						  borderStyle="none" borderThickness="0"   
						  id="searchBoxInput"  backgroundDisabledColor="#DDDDDD" backgroundColor="#FFFFFF" 
						  width="100%" y="-2"
						  color="#FFFFFF"
						  fontWeight="bold" change="{filterChange();}"/>
			
			<mx:Button styleName="xButton" 
					   width="14" 
					   height="14" 
					   buttonMode="true"
					   click="{searchBoxInput.text = ''; filterChange(); }" right="5" verticalCenter="-1"
					   visible="{searchBoxInput.text.length > 0}" />
		</mx:Canvas>
		
		
		
	</mx:HBox>
	
	<mx:Dissolve id="fadeOut" duration="300" alphaFrom="1" alphaTo="0" />
	<mx:Dissolve id="fadeIn" duration="300" alphaFrom="0" alphaTo="1" />
	<mx:ViewStack id="columnView" width="100%" resizeToContent="true" paddingBottom="0">
		
		
		<!-- the unfiltered view -->
		<mx:Accordion width="100%" 
					  borderSkin="{null}" 
					  borderThickness="0" 
					  borderStyle="none"
					  id="subscriptionListView" 
					  showEffect="fadeIn" 
					  hideEffect="fadeOut" openEasingFunction="{Cubic.easeInOut}"
					  headerHeight="23" 
					  openDuration="600" 
					  backgroundColor="#E8E8E8" 
					  resizeToContent="true">
		</mx:Accordion>
		
		
		<prefs:SceneSyncFilterView width="100%" 
								   showEffect="fadeIn" 
								   hideEffect="fadeOut" maxHeight="500" horizontalScrollPolicy="off" />
		
	</mx:ViewStack>
	
	<!--<mx:Spacer height="10" />-->
	
	
	<binding:DataBoundController target="{subscriptionListView}" dataProvider="{this.subs}">
		<binding:itemRenderer>
			<mx:Component>
				<prefs:SubscriptionSelectionView width="100%" />
			</mx:Component>
		</binding:itemRenderer>  
	</binding:DataBoundController>
	
	
	<proxy:MXProxyCall id="getSubscriptionsCall" 
					   proxy="{plugin.getProxy()}" 
					   property="{CallSceneSyncPluginType.SCENE_SYNC_GET_SUBSCRIBED_SCENES}"
					   responseDataChange="getSubscriptionsCall_responseDataChangeHandler(event);"
					   autoCall="true"
					   bind="true" />
	
	
</mx:VBox>
